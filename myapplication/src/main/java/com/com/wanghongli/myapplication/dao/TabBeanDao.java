package com.com.wanghongli.myapplication.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wanghongli.myapplication.wxtwo.TabBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TAB_BEAN".
*/
public class TabBeanDao extends AbstractDao<TabBean, Long> {

    public static final String TABLENAME = "TAB_BEAN";

    /**
     * Properties of entity TabBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Lid = new Property(0, Long.class, "lid", true, "_id");
        public final static Property CourseId = new Property(1, int.class, "courseId", false, "COURSE_ID");
        public final static Property Id = new Property(2, int.class, "id", false, "ID");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Order = new Property(4, int.class, "order", false, "ORDER");
        public final static Property IsLike = new Property(5, boolean.class, "isLike", false, "IS_LIKE");
        public final static Property ParentChapterId = new Property(6, int.class, "parentChapterId", false, "PARENT_CHAPTER_ID");
        public final static Property UserControlSetTop = new Property(7, boolean.class, "userControlSetTop", false, "USER_CONTROL_SET_TOP");
        public final static Property Visible = new Property(8, int.class, "visible", false, "VISIBLE");
    }


    public TabBeanDao(DaoConfig config) {
        super(config);
    }
    
    public TabBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TAB_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: lid
                "\"COURSE_ID\" INTEGER NOT NULL ," + // 1: courseId
                "\"ID\" INTEGER NOT NULL ," + // 2: id
                "\"NAME\" TEXT," + // 3: name
                "\"ORDER\" INTEGER NOT NULL ," + // 4: order
                "\"IS_LIKE\" INTEGER NOT NULL ," + // 5: isLike
                "\"PARENT_CHAPTER_ID\" INTEGER NOT NULL ," + // 6: parentChapterId
                "\"USER_CONTROL_SET_TOP\" INTEGER NOT NULL ," + // 7: userControlSetTop
                "\"VISIBLE\" INTEGER NOT NULL );"); // 8: visible
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TAB_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TabBean entity) {
        stmt.clearBindings();
 
        Long lid = entity.getLid();
        if (lid != null) {
            stmt.bindLong(1, lid);
        }
        stmt.bindLong(2, entity.getCourseId());
        stmt.bindLong(3, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
        stmt.bindLong(5, entity.getOrder());
        stmt.bindLong(6, entity.getIsLike() ? 1L: 0L);
        stmt.bindLong(7, entity.getParentChapterId());
        stmt.bindLong(8, entity.getUserControlSetTop() ? 1L: 0L);
        stmt.bindLong(9, entity.getVisible());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TabBean entity) {
        stmt.clearBindings();
 
        Long lid = entity.getLid();
        if (lid != null) {
            stmt.bindLong(1, lid);
        }
        stmt.bindLong(2, entity.getCourseId());
        stmt.bindLong(3, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
        stmt.bindLong(5, entity.getOrder());
        stmt.bindLong(6, entity.getIsLike() ? 1L: 0L);
        stmt.bindLong(7, entity.getParentChapterId());
        stmt.bindLong(8, entity.getUserControlSetTop() ? 1L: 0L);
        stmt.bindLong(9, entity.getVisible());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TabBean readEntity(Cursor cursor, int offset) {
        TabBean entity = new TabBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // lid
            cursor.getInt(offset + 1), // courseId
            cursor.getInt(offset + 2), // id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.getInt(offset + 4), // order
            cursor.getShort(offset + 5) != 0, // isLike
            cursor.getInt(offset + 6), // parentChapterId
            cursor.getShort(offset + 7) != 0, // userControlSetTop
            cursor.getInt(offset + 8) // visible
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TabBean entity, int offset) {
        entity.setLid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCourseId(cursor.getInt(offset + 1));
        entity.setId(cursor.getInt(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOrder(cursor.getInt(offset + 4));
        entity.setIsLike(cursor.getShort(offset + 5) != 0);
        entity.setParentChapterId(cursor.getInt(offset + 6));
        entity.setUserControlSetTop(cursor.getShort(offset + 7) != 0);
        entity.setVisible(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TabBean entity, long rowId) {
        entity.setLid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TabBean entity) {
        if(entity != null) {
            return entity.getLid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TabBean entity) {
        return entity.getLid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
